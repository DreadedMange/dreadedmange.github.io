const suits=["hearts","diamonds","clubs","spades"],ranks="23456789TJQKA".split(""),categories="straight flush;four of a kind;full house;flush;straight;three of a kind;two pair;pair;high card".split(";"),rankValues={A:14,K:13,Q:12,J:11,T:10,9:9,8:8,7:7,6:6,5:5,4:4,3:3,2:2};
let hand_cat_offsets={"high card":0,pair:Math.pow(2,21),"two pair":Math.pow(2,22),"three of a kind":Math.pow(2,21)+Math.pow(2,22),straight:Math.pow(2,23),flush:Math.pow(2,23)+Math.pow(2,21),"full house":Math.pow(2,23)+Math.pow(2,22),"four of a kind":Math.pow(2,23)+Math.pow(2,22)+Math.pow(2,21),"straight flush":Math.pow(2,24)};function bitsToInt(a){let c=0;for(let b=0;b<a.length;b++)c+=1<<rankValues[a[b].rank]-2;return c}
function makeScore(a,c,b,f){a=hand_cat_offsets[a];c=rankValues[c.rank]<<17;b=rankValues[b.rank]<<13;f=bitsToInt(f);return a+c+b+f}function isFlush(a){return""!==a[0].suit&&a.every(c=>c.suit===a[0].suit)?!0:!1}
function isStraight(a){if(5>a.length)return!1;5<a.length&&console.warn("isStraight passed a hand with too many cards!");if("A"===a[0].rank&&"5"===a[1].rank&&"4"===a[2].rank&&"3"===a[3].rank&&"2"===a[4].rank)return!0;a=a.map(c=>rankValues[c.rank]);a.sort((c,b)=>b-c);return 1===a[0]-a[1]&&1===a[1]-a[2]&&1===a[2]-a[3]&&1===a[3]-a[4]?!0:!1}
function evalHand(a,c=!0){c&&a.sort((n,h)=>rankValues[h.rank]-rankValues[n.rank]);let b=c=null,f=null,k=isFlush(a),m=isStraight(a),l="",d="";var g=[];let p="",q="";g=[];let t=[];m&&(l="A"===a[0].rank&&"2"===a[4].rank?a[1]:a[0]);k&&m?(d="straight flush",b=null,f=l,c=makeScore(d,f,0,0)):k?(d="flush",b=a,f=a[0],c=makeScore(d,0,0,a)):m&&(d="straight",b=null,f=l,c=makeScore(d,f,0,0));if(!m&&!k){const n=a.reduce((e,r)=>{e[r.rank]=(e[r.rank]||0)+1;return e},{}),h=Object.keys(n);h.sort((e,r)=>n[r]-n[e]);
4===n[h[0]]?(d="four of a kind",g=a.filter(e=>e.rank===h[0]),b=a.filter(e=>e.rank!==h[0]),f=g[0],c=makeScore(d,g[0],0,b)):3===n[h[0]]?2===n[h[1]]?(d="full house",g=a.filter(e=>e.rank===h[0]),b=a.filter(e=>e.rank!==h[0]),f=g[0],c=makeScore(d,g[0],b[0],{})):(d="three of a kind",g=a.filter(e=>e.rank===h[0]),b=a.filter(e=>e.rank!==h[0]),f=g[0],c=makeScore(d,g[0],0,b)):2===n[h[0]]?2===n[h[1]]?(d="two pair",p=h[0],q=h[1],rankValues[p]<rankValues[q]&&([p,q]=[q,p]),g=a.filter(e=>e.rank===p),t=a.filter(e=>
e.rank===q),b=a.filter(e=>e.rank!==p&&e.rank!==q),f=g[0],c=makeScore(d,g[0],t[0],b),b=t.concat(b)):(d="pair",g=a.filter(e=>e.rank===h[0]),b=a.filter(e=>e.rank!==h[0]),f=g[0],c=makeScore(d,g[0],0,b)):(d="high card",b=a.slice(1),f=a[0],c=makeScore(d,0,0,a))}d=(d?d:"").replace(/^\s+|\s+$/g,"");d=categories.indexOf(d);return{category:d,definer:f.rank,score:c,kickers:b}}const flush_env_cache={},nonflush_env_cache={};
function scoreHand(a){a=a.slice();a.sort((c,b)=>rankValues[b.rank]-rankValues[c.rank]);return scoreHandEnv(a)}function scoreHandEnv(a){const c=a.map(f=>f.rank).join("");let b;isFlush(a)?(b=flush_env_cache[c],void 0===b&&(b=evalHand(a,!1),flush_env_cache[c]=b)):(b=nonflush_env_cache[c],void 0===b&&(b=evalHand(a,!1),nonflush_env_cache[c]=b));return b}
function bestOmahaHand(a,c){if(5!==a.length||4!==c.length)throw console.log("board cards: "+a.length+" player cards: "+c.length),Error("Invalid input: board must have 5 cards and player hand must have 4 cards.");var b=function(k){let m=[];for(let l=0;3>l;l++)for(let d=l+1;4>d;d++)m.push([k[l],k[d]]);return m}(c);a=function(k){let m=[];for(let l=0;3>l;l++)for(let d=l+1;4>d;d++)for(let g=d+1;5>g;g++)m.push([k[l],k[d],k[g]]);return m}(a);c=null;let f=-1;for(const k of b)for(const m of a){b=k.concat(m);
const l=scoreHand(b).score;l>f&&(f=l,c=b)}return c}function createDeck(){const a=[];for(let c of suits)for(let b of ranks)a.push({rank:b,suit:c});return a}function shuffleDeck(a){for(let c=a.length-1;0<c;c--){const b=Math.floor(Math.random()*(c+1));[a[c],a[b]]=[a[b],a[c]]}return a}function dealCards(a,c){const b=[];for(let f=0;f<c;f++)b.push(a.pop());return b}
function getSuitChar(a){switch(a){case "spades":return"\u2660";case "hearts":return"\u2665";case "diamonds":return"\u2666";case "clubs":return"\u2663";default:return""}}function getSuitCharColor(a){switch(a){case "spades":return'<span class="black">\u2660</span>';case "hearts":return'<span class="red">\u2665</span>';case "diamonds":return'<span class="red">\u2666</span>';case "clubs":return'<span class="black">\u2663</span>';default:return""}}
function getHandDescription(a){a=scoreHand(a);switch(a.category){case 8:return`High card: ${a.definer}`;case 7:return`Pair of ${a.definer}s`;case 6:return`Two pair: ${a.definer}s and ${a.kickers[0].rank}s`;case 5:return`Three of a kind: ${a.definer}s`;case 4:return`Straight: ${a.definer} high`;case 3:return`Flush: ${a.definer} high`;case 2:return`Full house: ${a.definer}s full of ${a.kickers[0].rank}s`;case 1:return`Four of a kind: ${a.definer}s`;case 0:return`Straight flush: ${a.definer} high`;default:return"Invalid hand"}}
function testGetHandDescription(){console.log(getHandDescription([{rank:"ace",suit:"spades"},{rank:"ace",suit:"hearts"},{rank:"ace",suit:"diamonds"},{rank:"king",suit:"clubs"},{rank:"king",suit:"spades"}]))}function parseHand(a){const c=[];for(let b=0;b<a.length;b+=2){const f=a[b];let k;switch(a[b+1]){case "s":k="spades";break;case "h":k="hearts";break;case "d":k="diamonds";break;case "c":k="clubs"}c.push({rank:f,suit:k})}return c}var timerVar=setInterval(countTimer,1E3),totalSeconds=0;
function countTimer(){++totalSeconds;var a=Math.floor(totalSeconds/3600),c=Math.floor((totalSeconds-3600*a)/60);a=totalSeconds-(3600*a+60*c);document.getElementById("minutes").innerHTML=pad(c);document.getElementById("seconds").innerHTML=pad(a)}function pad(a){a+="";return 2>a.length?"0"+a:a};
