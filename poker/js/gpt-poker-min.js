const suits=["hearts","diamonds","clubs","spades"],ranks="23456789TJQKA".split(""),categories="straight flush;four of a kind;full house;flush;straight;three of a kind;two pair;pair;high card".split(";"),rankValues={A:14,K:13,Q:12,J:11,T:10,9:9,8:8,7:7,6:6,5:5,4:4,3:3,2:2};
let hand_cat_offsets={"high card":0,pair:Math.pow(2,21),"two pair":Math.pow(2,22),"three of a kind":Math.pow(2,21)+Math.pow(2,22),straight:Math.pow(2,23),flush:Math.pow(2,23)+Math.pow(2,21),"full house":Math.pow(2,23)+Math.pow(2,22),"four of a kind":Math.pow(2,23)+Math.pow(2,22)+Math.pow(2,21),"straight flush":Math.pow(2,24)};function bitsToInt(a){let b=0;for(let c=0;c<a.length;c++)b+=1<<rankValues[a[c].rank]-2;return b}
function makeScore(a,b,c,e){a=hand_cat_offsets[a];b=rankValues[b.rank]<<17;c=rankValues[c.rank]<<13;e=bitsToInt(e);return a+b+c+e}function isFlush(a){return""!==a[0].suit&&a.every(b=>b.suit===a[0].suit)?!0:!1}
function isStraight(a){if(5>a.length)return!1;5<a.length&&console.warn("isStraight passed a hand with too many cards!");if("A"===a[0].rank&&"5"===a[1].rank&&"4"===a[2].rank&&"3"===a[3].rank&&"2"===a[4].rank)return!0;a=a.map(b=>rankValues[b.rank]);a.sort((b,c)=>c-b);return 1===a[0]-a[1]&&1===a[1]-a[2]&&1===a[2]-a[3]&&1===a[3]-a[4]?!0:!1}
function evalHand(a,b=!0){b&&a.sort((n,l)=>rankValues[l.rank]-rankValues[n.rank]);let c=b=null,e=null,g=isFlush(a),m=isStraight(a),h="",d="";var k=[];let p="",q="";k=[];let t=[];m&&(h="A"===a[0].rank&&"2"===a[4].rank?a[1]:a[0]);g&&m?(d="straight flush",c=null,e=h,b=makeScore(d,e,0,0)):g?(d="flush",c=a,e=a[0],b=makeScore(d,0,0,a)):m&&(d="straight",c=null,e=h,b=makeScore(d,e,0,0));if(!m&&!g){const n=a.reduce((f,r)=>{f[r.rank]=(f[r.rank]||0)+1;return f},{}),l=Object.keys(n);l.sort((f,r)=>n[r]-n[f]);
4===n[l[0]]?(d="four of a kind",k=a.filter(f=>f.rank===l[0]),c=a.filter(f=>f.rank!==l[0]),e=k[0],b=makeScore(d,k[0],0,c)):3===n[l[0]]?2===n[l[1]]?(d="full house",k=a.filter(f=>f.rank===l[0]),c=a.filter(f=>f.rank!==l[0]),e=k[0],b=makeScore(d,k[0],c[0],{})):(d="three of a kind",k=a.filter(f=>f.rank===l[0]),c=a.filter(f=>f.rank!==l[0]),e=k[0],b=makeScore(d,k[0],0,c)):2===n[l[0]]?2===n[l[1]]?(d="two pair",p=l[0],q=l[1],rankValues[p]<rankValues[q]&&([p,q]=[q,p]),k=a.filter(f=>f.rank===p),t=a.filter(f=>
f.rank===q),c=a.filter(f=>f.rank!==p&&f.rank!==q),e=k[0],b=makeScore(d,k[0],t[0],c),c=t.concat(c)):(d="pair",k=a.filter(f=>f.rank===l[0]),c=a.filter(f=>f.rank!==l[0]),e=k[0],b=makeScore(d,k[0],0,c)):(d="high card",c=a.slice(1),e=a[0],b=makeScore(d,0,0,a))}d=(d?d:"").replace(/^\s+|\s+$/g,"");d=categories.indexOf(d);return{category:d,definer:e.rank,score:b,kickers:c}}const flush_env_cache={},nonflush_env_cache={};
function scoreHand(a){a=a.slice();a.sort((b,c)=>rankValues[c.rank]-rankValues[b.rank]);return scoreHandEnv(a)}function scoreHandEnv(a){const b=a.map(e=>e.rank).join("");let c;isFlush(a)?(c=flush_env_cache[b],void 0===c&&(c=evalHand(a,!1),flush_env_cache[b]=c)):(c=nonflush_env_cache[b],void 0===c&&(c=evalHand(a,!1),nonflush_env_cache[b]=c));return c}
function bestOmahaHand(a,b){if(5!==a.length||4!==b.length)throw console.log("board cards: "+a.length+" player cards: "+b.length),Error("Invalid input: board must have 5 cards and player hand must have 4 cards.");var c=function(g){let m=[];for(let h=0;3>h;h++)for(let d=h+1;4>d;d++)m.push([g[h],g[d]]);return m}(b);a=function(g){let m=[];for(let h=0;3>h;h++)for(let d=h+1;4>d;d++)for(let k=d+1;5>k;k++)m.push([g[h],g[d],g[k]]);return m}(a);b=null;let e=-1;for(const g of c)for(const m of a){c=g.concat(m);
const h=scoreHand(c).score;h>e&&(e=h,b=c)}return b}function combinations_of_five(a){let b=[],c=a.length;if(5>c)return b;for(let e=0;e<c-4;e++)for(let g=e+1;g<c-3;g++)for(let m=g+1;m<c-2;m++)for(let h=m+1;h<c-1;h++)for(let d=h+1;d<c;d++)b.push([a[e],a[g],a[m],a[h],a[d]]);return b}
function bestHoldemHand(a,b){if(5!==a.length||2!==b.length)throw console.log("board cards: "+a.length+" player cards: "+b.length),Error("Invalid input: board must have 5 cards and player hand must have 2 cards.");a=a.concat(b);var c=combinations_of_five(a,5);a=null;b=-1;for(const e of c)c=scoreHand(e).score,c>b&&(b=c,a=e);return a}function createDeck(){const a=[];for(let b of suits)for(let c of ranks)a.push({rank:c,suit:b});return a}
function shuffleDeck(a){for(let b=a.length-1;0<b;b--){const c=Math.floor(Math.random()*(b+1));[a[b],a[c]]=[a[c],a[b]]}return a}function dealCards(a,b){const c=[];for(let e=0;e<b;e++)c.push(a.pop());return c}function getSuitChar(a){switch(a){case "spades":return"\u2660";case "hearts":return"\u2665";case "diamonds":return"\u2666";case "clubs":return"\u2663";default:return""}}
function getSuitCharColor(a){switch(a){case "spades":return'<span class="black">\u2660</span>';case "hearts":return'<span class="red">\u2665</span>';case "diamonds":return'<span class="red">\u2666</span>';case "clubs":return'<span class="black">\u2663</span>';default:return""}}
function getHandDescription(a){a=scoreHand(a);switch(a.category){case 8:return`High card: ${a.definer}`;case 7:return`Pair of ${a.definer}s`;case 6:return`Two pair: ${a.definer}s and ${a.kickers[0].rank}s`;case 5:return`Three of a kind: ${a.definer}s`;case 4:return`Straight: ${a.definer} high`;case 3:return`Flush: ${a.definer} high`;case 2:return`Full house: ${a.definer}s full of ${a.kickers[0].rank}s`;case 1:return`Four of a kind: ${a.definer}s`;case 0:return`Straight flush: ${a.definer} high`;default:return"Invalid hand"}}
function testGetHandDescription(){console.log(getHandDescription([{rank:"ace",suit:"spades"},{rank:"ace",suit:"hearts"},{rank:"ace",suit:"diamonds"},{rank:"king",suit:"clubs"},{rank:"king",suit:"spades"}]))}function parseHand(a){const b=[];for(let c=0;c<a.length;c+=2){const e=a[c];let g;switch(a[c+1]){case "s":g="spades";break;case "h":g="hearts";break;case "d":g="diamonds";break;case "c":g="clubs"}b.push({rank:e,suit:g})}return b}var timerVar=setInterval(countTimer,1E3),totalSeconds=0;
function countTimer(){++totalSeconds;var a=Math.floor(totalSeconds/3600),b=Math.floor((totalSeconds-3600*a)/60);a=totalSeconds-(3600*a+60*b);"undefined"!==typeof document&&(document.getElementById("minutes").innerHTML=pad(b),document.getElementById("seconds").innerHTML=pad(a))}function pad(a){a+="";return 2>a.length?"0"+a:a}function displayCards(a){return a.map(b=>`${b.rank}${getSuitChar(b.suit)}`).join(", ")}
"undefined"!==typeof module&&(module.exports={createDeck,shuffleDeck,scoreHand,getHandDescription,bestOmahaHand,categories,getSuitCharColor,parseHand,bestHoldemHand,displayCards,rankValues});
