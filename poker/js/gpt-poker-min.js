const suits=["hearts","diamonds","clubs","spades"],ranks="23456789TJQKA".split(""),categories="straight flush;four of a kind;full house;flush;straight;three of a kind;two pair;pair;high card".split(";"),rankValues={A:14,K:13,Q:12,J:11,T:10,9:9,8:8,7:7,6:6,5:5,4:4,3:3,2:2};
let hand_cat_offsets={"high card":0,pair:Math.pow(2,21),"two pair":Math.pow(2,22),"three of a kind":Math.pow(2,21)+Math.pow(2,22),straight:Math.pow(2,23),flush:Math.pow(2,23)+Math.pow(2,21),"full house":Math.pow(2,23)+Math.pow(2,22),"four of a kind":Math.pow(2,23)+Math.pow(2,22)+Math.pow(2,21),"straight flush":Math.pow(2,24)};function bitsToInt(a){let c=0;for(let b=0;b<a.length;b++)c+=1<<rankValues[a[b].rank]-2;return c}
function makeScore(a,c,b,d){a=hand_cat_offsets[a];c=rankValues[c.rank]<<17;b=rankValues[b.rank]<<13;d=bitsToInt(d);return a+c+b+d}function isFlush(a){return""!==a[0].suit&&a.every(c=>c.suit===a[0].suit)?!0:!1}
function isStraight(a){if(5>a.length)return!1;5<a.length&&console.warn("isStraight passed a hand with too many cards!");if("A"===a[0].rank&&"5"===a[1].rank&&"4"===a[2].rank&&"3"===a[3].rank&&"2"===a[4].rank)return!0;a=a.map(c=>rankValues[c.rank]);a.sort((c,b)=>b-c);return 1===a[0]-a[1]&&1===a[1]-a[2]&&1===a[2]-a[3]&&1===a[3]-a[4]?!0:!1}
function evalHand(a,c=!0){c&&a.sort((n,m)=>rankValues[m.rank]-rankValues[n.rank]);let b=c=null,d=null,g=isFlush(a),k=isStraight(a),h="",e="";var l=[];let p="",q="";l=[];let t=[];k&&(h="A"===a[0].rank&&"2"===a[4].rank?a[1]:a[0]);g&&k?(e="straight flush",b=null,d=h,c=makeScore(e,d,0,0)):g?(e="flush",b=a,d=a[0],c=makeScore(e,0,0,a)):k&&(e="straight",b=null,d=h,c=makeScore(e,d,0,0));if(!k&&!g){const n=a.reduce((f,r)=>{f[r.rank]=(f[r.rank]||0)+1;return f},{}),m=Object.keys(n);m.sort((f,r)=>n[r]-n[f]);
4===n[m[0]]?(e="four of a kind",l=a.filter(f=>f.rank===m[0]),b=a.filter(f=>f.rank!==m[0]),d=l[0],c=makeScore(e,l[0],0,b)):3===n[m[0]]?2===n[m[1]]?(e="full house",l=a.filter(f=>f.rank===m[0]),b=a.filter(f=>f.rank!==m[0]),d=l[0],c=makeScore(e,l[0],b[0],{})):(e="three of a kind",l=a.filter(f=>f.rank===m[0]),b=a.filter(f=>f.rank!==m[0]),d=l[0],c=makeScore(e,l[0],0,b)):2===n[m[0]]?2===n[m[1]]?(e="two pair",p=m[0],q=m[1],rankValues[p]<rankValues[q]&&([p,q]=[q,p]),l=a.filter(f=>f.rank===p),t=a.filter(f=>
f.rank===q),b=a.filter(f=>f.rank!==p&&f.rank!==q),d=l[0],c=makeScore(e,l[0],t[0],b),b=t.concat(b)):(e="pair",l=a.filter(f=>f.rank===m[0]),b=a.filter(f=>f.rank!==m[0]),d=l[0],c=makeScore(e,l[0],0,b)):(e="high card",b=a.slice(1),d=a[0],c=makeScore(e,0,0,a))}e=(e?e:"").replace(/^\s+|\s+$/g,"");e=categories.indexOf(e);return{category:e,definer:d.rank,score:c,kickers:b}}const flush_env_cache={},nonflush_env_cache={};
function scoreHand(a){a=a.slice();a.sort((c,b)=>rankValues[b.rank]-rankValues[c.rank]);return scoreHandEnv(a)}function scoreHandEnv(a){const c=a.map(d=>d.rank).join("");let b;isFlush(a)?(b=flush_env_cache[c],void 0===b&&(b=evalHand(a,!1),flush_env_cache[c]=b)):(b=nonflush_env_cache[c],void 0===b&&(b=evalHand(a,!1),nonflush_env_cache[c]=b));return b}
function bestOmahaHand(a,c){if(5!==a.length||4!==c.length)throw console.log("board cards: "+a.length+" player cards: "+c.length),Error("Invalid input: board must have 5 cards and player hand must have 4 cards.");var b=function(g){let k=[];for(let h=0;3>h;h++)for(let e=h+1;4>e;e++)k.push([g[h],g[e]]);return k}(c);a=function(g){let k=[];for(let h=0;3>h;h++)for(let e=h+1;4>e;e++)for(let l=e+1;5>l;l++)k.push([g[h],g[e],g[l]]);return k}(a);c=null;let d=-1;for(const g of b)for(const k of a){b=g.concat(k);
const h=scoreHand(b).score;h>d&&(d=h,c=b)}return c}function combinations_of_five(a){let c=[],b=a.length;if(5>b)return c;for(let d=0;d<b-4;d++)for(let g=d+1;g<b-3;g++)for(let k=g+1;k<b-2;k++)for(let h=k+1;h<b-1;h++)for(let e=h+1;e<b;e++)c.push([a[d],a[g],a[k],a[h],a[e]]);return c}
function bestHoldemHand(a,c){if(5!==a.length||2!==c.length)throw console.log("board cards: "+a.length+" player cards: "+c.length),Error("Invalid input: board must have 5 cards and player hand must have 2 cards.");a=a.concat(c);var b=combinations_of_five(a,5);a=null;c=-1;for(const d of b)b=scoreHand(d).score,b>c&&(c=b,a=d);return a}function createDeck(){const a=[];for(let c of suits)for(let b of ranks)a.push({rank:b,suit:c});return a}
function shuffleDeck(a){for(let c=a.length-1;0<c;c--){const b=Math.floor(Math.random()*(c+1));[a[c],a[b]]=[a[b],a[c]]}return a}function dealCards(a,c){const b=[];for(let d=0;d<c;d++)b.push(a.pop());return b}function removeCard(a,c){return a.filter(b=>!(b.rank===c.rank&&b.suit===c.suit))}function removeCards(a,c){const b=new Set(c.map(d=>`${d.rank}${d.suit}`));return a.filter(d=>!b.has(`${d.rank}${d.suit}`))}
function pickStraight(a){const c=[...ranks.slice(0,ranks.length-4),"A"];let b=Math.floor(Math.random()*c.length),d=[];d="A"===c[b]?["A","2","3","4","5"]:ranks.slice(b,b+5);for(let g of d)if(!a.some(k=>k.rank===g))return null;return d.map(g=>{const k=a.filter(e=>e.rank===g),h=k[Math.floor(Math.random()*k.length)];a=a.filter(e=>!(e.rank===h.rank&&e.suit===h.suit));return h})}
function getSuitChar(a){switch(a){case "spades":return"\u2660";case "hearts":return"\u2665";case "diamonds":return"\u2666";case "clubs":return"\u2663";default:return""}}function getSuitCharColor(a){switch(a){case "spades":return'<span class="black">\u2660</span>';case "hearts":return'<span class="red">\u2665</span>';case "diamonds":return'<span class="red">\u2666</span>';case "clubs":return'<span class="black">\u2663</span>';default:return""}}
function getHandDescription(a){a=scoreHand(a);switch(a.category){case 8:return`High card: ${a.definer}`;case 7:return`Pair of ${a.definer}s`;case 6:return`Two pair: ${a.definer}s and ${a.kickers[0].rank}s`;case 5:return`Three of a kind: ${a.definer}s`;case 4:return`Straight: ${a.definer} high`;case 3:return`Flush: ${a.definer} high`;case 2:return`Full house: ${a.definer}s full of ${a.kickers[0].rank}s`;case 1:return`Four of a kind: ${a.definer}s`;case 0:return`Straight flush: ${a.definer} high`;default:return"Invalid hand"}}
function testGetHandDescription(){console.log(getHandDescription([{rank:"ace",suit:"spades"},{rank:"ace",suit:"hearts"},{rank:"ace",suit:"diamonds"},{rank:"king",suit:"clubs"},{rank:"king",suit:"spades"}]))}function parseHand(a){const c=[];for(let b=0;b<a.length;b+=2){const d=a[b];let g;switch(a[b+1]){case "s":g="spades";break;case "h":g="hearts";break;case "d":g="diamonds";break;case "c":g="clubs"}c.push({rank:d,suit:g})}return c}var timerVar=setInterval(countTimer,1E3),totalSeconds=0;
function countTimer(){++totalSeconds;var a=Math.floor(totalSeconds/3600),c=Math.floor((totalSeconds-3600*a)/60);a=totalSeconds-(3600*a+60*c);if("undefined"!==typeof document){var b=document.getElementById("setting_use_timer"),d=document.getElementById("timer");b&&!b.checked?d.style.display="none":(d.style.display="block",d.innerHTML=pad(c)+":"+pad(a))}}function pad(a){a+="";return 2>a.length?"0"+a:a}function displayCards(a){return a.map(c=>`${c.rank}${getSuitChar(c.suit)}`).join(", ")}
"undefined"!==typeof module&&(module.exports={createDeck,shuffleDeck,scoreHand,getHandDescription,bestOmahaHand,categories,getSuitCharColor,parseHand,bestHoldemHand,displayCards,rankValues,pickStraight,removeCards});
